<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>树莓派基本指令</title>
    <link href="/Cathelloya/2023/09/23/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/Cathelloya/2023/09/23/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>账户 chxby<br>密码 741852963</p><h1 id="0-实用小指令"><a href="#0-实用小指令" class="headerlink" title="0.实用小指令"></a>0.实用小指令</h1><p>查看树莓派的温度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vcgencmd measure_temp<br></code></pre></td></tr></table></figure><p>修改显存的大小（默认的是76MB）<br>&#x3D;&#x3D;开始–&gt;首选项–&gt;RaspberryPiConfiguration–&gt;GPU Memory–&gt;512&#x3D;&#x3D;</p><h1 id="1-使用shell连接树莓派"><a href="#1-使用shell连接树莓派" class="headerlink" title="1.使用shell连接树莓派"></a>1.使用shell连接树莓派</h1><p>windows下在cmd中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh chxby@192.168.43.128<br></code></pre></td></tr></table></figure><p> 基础配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo raspi-config<br></code></pre></td></tr></table></figure><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo shutdown -h now<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo halt<br></code></pre></td></tr></table></figure><p> 在系统上运行以下两个命令来更新软件包列表和已安装的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt full-upgrade<br></code></pre></td></tr></table></figure><h1 id="2-配置静态IP地址"><a href="#2-配置静态IP地址" class="headerlink" title="2.配置静态IP地址"></a>2.配置静态IP地址</h1><p> 在树莓派上查看IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostname -I<br></code></pre></td></tr></table></figure><p> 配置网关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nano /etc/dhcpcd.conf<br></code></pre></td></tr></table></figure><p>wanguan查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipconfig<br></code></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">interface wlan0<br>static <span class="hljs-attribute">ip_address</span>=192.168.43.128/24<br>static <span class="hljs-attribute">routers</span>=wanguan<br>static <span class="hljs-attribute">domain_name_servers</span>=wanguan<br></code></pre></td></tr></table></figure><h1 id="3-安装C"><a href="#3-安装C" class="headerlink" title="3.安装C"></a>3.安装C</h1><p>安装指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install wiringpi<br></code></pre></td></tr></table></figure><p>输入以下指令会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpio -v<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpio readall<br></code></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://project-downloads.drogon.net/wiring-latest.deb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i wiringpi-latest.deb<br></code></pre></td></tr></table></figure><h3 id="上面的程序有问题"><a href="#上面的程序有问题" class="headerlink" title="上面的程序有问题"></a>上面的程序有问题</h3><p>安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git-core<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git-core<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/WiringPi/WiringPi.git<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp/WiringPi<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./build<br></code></pre></td></tr></table></figure><p>更新指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin<br></code></pre></td></tr></table></figure><h1 id="4-系统的备份和还原"><a href="#4-系统的备份和还原" class="headerlink" title="4.系统的备份和还原"></a>4.系统的备份和还原</h1><p>一个让你后悔一辈子的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rm  -rf /*（作用是删除树莓派的根目录）<br></code></pre></td></tr></table></figure><p>树莓派Raspberry Pi OS要有两个分区,boot和root<br>boot,启动分区，Fat32<br>root，根分区，EXT4</p><p>全卡备份和压缩备份</p><p>&#x3D;&#x3D;全卡备份&#x3D;&#x3D;<br>方法一<br>硬件准备：读卡器，另一张SD卡且要求存储大于等于使用的SD 卡<br>软件操作：在电脑桌面新建win32pi.img<br>                 打开win32软件，先读取root盘到上面新建的文件中<br>方法二<br>在VNC中打开SD Card Copy，复制到新卡</p><p>方法三<br>打开VNC，插入新卡<br>打开终端窗口，输入<code>lsblk</code>，查看两个SD卡的文件路径<br>输入,if后面的是老卡，of后面的是新卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dd if=/dev/mmcblk0 of=/dev/sda<br></code></pre></td></tr></table></figure><p>在等待时输入第二行,查看上一个命令的进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ps -ef | grep dd<br></code></pre></td></tr></table></figure><p>输入pid&#x3D;进程号root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo watch -n 3 kill -USR1 pid<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;压缩备份&#x3D;&#x3D;<br>打开VNC，在终端输入指令，查看剩余空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">df -h<br></code></pre></td></tr></table></figure><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/nanhantianyi/rpi-backup.git &amp;&amp; cd rpi-backup<br></code></pre></td></tr></table></figure><p>输入备份镜像的名称,*.img</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./back.sh pibackup.img<br></code></pre></td></tr></table></figure><p>查看目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure><p>在终端输入指令，查看剩余空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">df -h<br></code></pre></td></tr></table></figure><p><em><strong>全卡备份的方法二、三可以直接将SD卡插入，方法一需要烧录，压缩备份使用rpi-backup</strong></em></p><h1 id="5-GPIO管脚控制"><a href="#5-GPIO管脚控制" class="headerlink" title="5.GPIO管脚控制"></a>5.GPIO管脚控制</h1><p>引脚的编码方式<br>&#x3D;&#x3D;板载编码&#x3D;&#x3D;<br>按照1-40的编号<br>![[3caaaf9650b8aacacd3456bb4ff8ef6a.png]]<br>&#x3D;&#x3D;BCM编码&#x3D;&#x3D;<br>Python语言控制<br>&#x3D;&#x3D;WiringPi编码&#x3D;&#x3D;<br>C语言控制</p><p>查看方式<br>方式一，查看板载编码，pinout<br>方式二，查看全部编码，gpio readall</p><p>设置管脚为输出模式，-g表示BCM编码，去掉这个参数就是以wiringpi编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpio -g mode 4 out<br></code></pre></td></tr></table></figure><p>读取管脚状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpio -g read 4<br></code></pre></td></tr></table></figure><p>修改为高电平</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpio -g write 4 1<br></code></pre></td></tr></table></figure><p><em>进阶的GPIO</em><br>&#x2F;&#x2F;方式一<br>输入指令进入gpio目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /sys/class/gpio<br></code></pre></td></tr></table></figure><p>查看内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure><p>这边的编码使用BCM编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 26 &gt; export<br></code></pre></td></tr></table></figure><p>查看内容，多出了一个引脚目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure><p>进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd gpio26<br></code></pre></td></tr></table></figure><p>使用GPIO开始控制,设置引脚输出方向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo out &gt; direction<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 1 &gt; value<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 0 &gt; value<br></code></pre></td></tr></table></figure><p>注销GPIO引脚</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 26 &gt; unexport<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;方式二<br>使用python,BCM编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd Desktop/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano led.py<br></code></pre></td></tr></table></figure><p>ctrl+s保存，ctrl+x退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br>GPIO.setmode(GPIO.BCM)<br>GPIO.setup(<span class="hljs-number">4</span>,GPIO.OUT)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>GPIO.output(<span class="hljs-number">4</span>,GPIO.HIGH)<br>sleep(<span class="hljs-number">1</span>)<br>GPIO.output(<span class="hljs-number">4</span>,GPIO.LOW)<br>sleep(<span class="hljs-number">1</span>)<br>GPIO.cleanup()<br></code></pre></td></tr></table></figure><p>运行代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 led.py<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;方式三<br>使用C，wiringPi编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano led.c<br></code></pre></td></tr></table></figure><p>code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wiringPi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Pin 7</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(wiringPiSetup()&lt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>pinMode(Pin,OUTPUT);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br>digitalWrite(Pin,<span class="hljs-number">1</span>);<br>delay(<span class="hljs-number">200</span>);<br>digitalWrite(Pin,<span class="hljs-number">0</span>);<br>delay(<span class="hljs-number">200</span>);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译,gcc -o 文件名 文件名.c -lwirngPi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -o led led.c -lwiringPi<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sudo ./led<br></code></pre></td></tr></table></figure><h2 id="树莓派的串口"><a href="#树莓派的串口" class="headerlink" title="树莓派的串口"></a>树莓派的串口</h2><p>硬件串口 &#x2F;dev&#x2F;ttyAMA0<br>mini串口 &#x2F;dev&#x2F;ttyS0<br>引脚8 TXD，引脚10 RXD</p><p>主串口，可以通过引脚实现通讯<br>辅串口，不能通过GPIO通信，默认分配给蓝牙端<br>默认情况下，迷你串口是禁用的</p><p>查看当前串口的打开情况,找到ttyAMA0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls /dev -al<br></code></pre></td></tr></table></figure><p>打开mini串口-&gt;在preference-&gt;interface-&gt;serial port enable-&gt;serial console disable<br>再次查看串口的情况，可以找到mini串口ttyS0，硬件串口仍然是辅助串口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls /dev -al<br></code></pre></td></tr></table></figure><p>设置硬件串口为主串口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nano /boot/config.txt<br></code></pre></td></tr></table></figure><p>在末尾添加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dtoverlay</span>=pi3-miniuart-bt<br><span class="hljs-attr">force_turbo</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>重启一下<br>再次查看串口的情况，serial0 -&gt; ttyAMA0，硬件串口是主串口了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls /dev -al<br></code></pre></td></tr></table></figure><p>调试工具的安装，minicom串口助手</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install minicom<br></code></pre></td></tr></table></figure><p>连接TTL与树莓派GND-&gt;GND,RXD-&gt;8,TXD-&gt;10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">minicom -D /dev/ttyAMA0 -b 9600<br></code></pre></td></tr></table></figure><p>退出minicom,先按下ctrl+a,z,x</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Cathelloya/2023/09/23/hello-world/"/>
    <url>/Cathelloya/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
