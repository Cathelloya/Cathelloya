<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于信息论的一些思考</title>
    <link href="/Cathelloya/2023/11/20/%E4%B8%80%E4%B8%AA%E6%80%9D%E8%80%83/"/>
    <url>/Cathelloya/2023/11/20/%E4%B8%80%E4%B8%AA%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>今天看树莓派貌似是恢复疫情前的价格了<br>为了学习嵌入式买了个493的板子，和cbr一起AA了<br>坚持了几天的手机不上床，精神恢复不少</p><p>关于信息的一些思考，概率越小的事件所携带的信息量越大，我们由</p><script type="math/tex; mode=display">I(x_1x_2...x_n)=I(x_1)+I(x_2)+...I(x_n)</script><p>可以推导出</p><script type="math/tex; mode=display">I(x)=log_2{\frac{1}{P}}=-log_2P</script><p>这个世界上的种种事情都是由概率构成的，所携带的信息便可以通过这种方式从数学的角度度量出来，有时间看看香农当年发表的论文原文</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>KiCad基础操作</title>
    <link href="/Cathelloya/2023/09/23/Kicad-1/"/>
    <url>/Cathelloya/2023/09/23/Kicad-1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-符号库的制作"><a href="#1-符号库的制作" class="headerlink" title="1. 符号库的制作"></a>1. 符号库的制作</h1><p> 1.新建库<br><img src="pic/Pasted image 20230208124112.png" alt=""><br>2.鼠标左键长按从右向左选，碰到部分即全部，从左向右选，必选全部选中才行<br>3.引脚的属性，按tab键切换到下一个<br>电气类型，不知道的话选择自由，三态，无源<br>输入或输出选双向<br>USB是差分，选择双向<br>VCOM是内部稳压的外置滤波电容的引脚，设置为电源输出（两个电源输出相连会报错）<br>GND选电源输入<br>DAC_L音频输出选择输出<br>接滤波电容和GND的选择电源输出<br><img src="pic/Pasted image 20230208124416.png" alt=""><br>4.库符号属性<br>封装，选择封装<br>数据手册可以选择网址</p><p>封装筛选器，SO-16<em>,SOP-16</em> 筛选和关键字相关的</p><p>描述，描述功能，支持中文<br>关键字，最好用英文</p><p>编辑spice模型，用于电路仿真</p><p>Package…不可见，位置随便放<br><img src="pic/Pasted image 20230208125127.png" alt=""><br>5.在原理图中按下a放置并且查看属性<br><img src="pic/Pasted image 20230208125618.png" alt=""></p><h1 id="2-封装库的制作"><a href="#2-封装库的制作" class="headerlink" title="2. 封装库的制作"></a>2. 封装库的制作</h1><p>1.新建库，新建封装，选择贴片，保存至新建的库中<br>2.画出矩形框（比数据手册略大也是可以的），放置焊盘，按下e<br>选择焊盘类型<br>焊盘编号，即焊盘上面的数字<br>设置位置X<br>设置焊盘的尺寸<br>从通孔偏移形状，因为光标的中心不一定和几何中心重合，比如这个左偏0.35mm<br><img src="pic/Pasted image 20230208125923.png" alt=""><br>3.对焊盘按下ctrl+D,同时进行了复制粘贴<br>鼠标右键，特殊工具，精确移动，快捷键shift+M，输入移动的距离<br>鼠标右键，特殊工具，创建阵列<br><img src="pic/Pasted image 20230208131215.png" alt=""><br>4.空白处右键，焊盘重新编号，按顺序点击焊盘<br>5.天线处因为需要天线保护隔离，电磁干扰屏蔽，信号强度，所以需要keepout area<br>创建不规则焊盘，选择弧线<br>但是只能画一个大概，如果精度要求高，需要email厂家索要.dxf文件，然后文件-&gt;导入-&gt;图形<br>6.从选取创建多边形，我们画的是分开的，而创建的多边形是一体的<br><img src="pic/Pasted image 20230208132433.png" alt=""><br>7.焊盘2是GND,把焊盘2放入那个多边形，选择多边形，层选择cu，填充形状<br>选择焊盘2，按两下crtl+E</p><p><img src="pic/Pasted image 20230208133042.png" alt=""><br>8.养成良好的习惯，选择丝印层，在焊盘1处放置一个圆圈，不能离焊盘太近<br>选择F.Courtyard顶层封装层，稍大一些，框选中焊盘<br>丝印放在焊盘上会有警报，调整方法<br>（1）删除警报：）<br>（2）丝印仅保留未被焊盘覆盖的区域，删除被遮挡的部分<br><img src="pic/Pasted image 20230208133914.png" alt=""></p><h1 id="3-绘制原理图PCB布线全流程"><a href="#3-绘制原理图PCB布线全流程" class="headerlink" title="3. 绘制原理图PCB布线全流程"></a>3. 绘制原理图PCB布线全流程</h1><p> 原理图<br>1.图框的设置，双击title<br>2.放置<br>有极性的电容，搜索c_p<br>保险，f<br>选中，按下G，可以拖动<br>3.同一个网络标签可以通过高亮来显示<br>添加连接的图形线I<br>4.位号分配，批注原理图<br>5.分配封装，可以多选元器件，封装筛选，双击<br><img src="pic/Pasted image 20230208142305.png" alt=""><br>6.电气规则检查<br>如果引脚确实不需要连接，按下Q<br>按照自己的规则，编辑原理图设置<br>或者右击错误，排除<br><img src="pic/Pasted image 20230208143125.png" alt=""><br> PCB<br>1.导入.dxf文件，也就是板框文件，如果是freecad,opencad,proecad可以直接用，如果是autocad导出的，要按下X进行打散，否则会乱<br>选择放置的层，简单的一般在Edge.Cuts层<br>比较复杂的可以先放在User.Drawing层，然后一点一点的搬运到Edge.Cuts层<br>测量一下尺寸有没有问题<br>按下ALT+3，进入3D视图，如果是未封闭图形会报错<br>2.电子元件向下对齐，下指的是元件的下边缘，也就是后选择上去的元件<br>获取和移动封装，t，name<br>布线预设-&gt;预定义尺寸<br>              -&gt;网络类表<br>按下V快速添加过孔<br>3.敷铜，填充区，敷铜优先级0最低，按下B填充<br>间隙和最小宽度改下<br>焊盘连接 防热焊盘-&gt;防回流焊<br>进行电器规则的检查<br><img src="pic/Pasted image 20230208160707.png" alt=""><br>4.如果还是非封闭图形，隐藏所有层，只显示edge.cut层<br>若看不见，则调细边框<br>5.导出，导出step，给结构的配型<br>制造输出，BOM<br>                 .pos元件放置，用在SMT贴片<br>gerber打板文件，生成层文件和过孔文件</p><h1 id="4-导出导入3D模型"><a href="#4-导出导入3D模型" class="headerlink" title="4. 导出导入3D模型"></a>4. 导出导入3D模型</h1><p>1.封装属性，导入<br>2.打开FreeCAD<br>展开start，选择sketch<br>文件，新建<br>新建图纸，XY<br>show grid，画一个正方形，左侧close<br>展开sketch，选择part<br>点击sketch，点击Extrude，设置along高度<br>导出export<br>3.在符号编辑器导入封装，原理图，更新PCB<br>放置网格原点<br>4.在PCB文件，导出，STEP，注意勾选替换相似文件<br>5.<a href="www.3dcontentcentral.cn">一些3D封装模型的网站</a><br>kicad支持比较好的是.step，版本推荐AP214<br>[2023.2.8]</p><h1 id="5-制作一个USB隔离器"><a href="#5-制作一个USB隔离器" class="headerlink" title="5. 制作一个USB隔离器"></a>5. 制作一个USB隔离器</h1><p>1.单独的为USB供电</p><p>B0505LS金升阳，输入电压4.5V-5.5V，输出电压5V，输出电流200mA，输出负载不能小于额定负载    的10%，可以在输出端并联一个电阻接地<br>SL2.1A，适用于USB1.1，读取不太好</p><p>按下` 可以直接进入网络高亮<br>开机的时候瞬间的电流还是比较高的，需要注意</p><p>AutoCAD的文件.dwg转换为KiCAD可以读取的文件，使用LibreCAD软件（主要偏向于2D）<br>导入.dwg文件后连续按两下鼠标中键，或者按下视图自动缩放，保存R12<br>打开Kicad，导入.dxf文件，放入User.Drawing层，默认线宽可以调小一点，防止不封闭<br>打开Edge.cuts层，画出电路板的轮廓<br>如果需要有洞，方法一 在Kicad画出一个轮廓；方法二 从右往左框选中圆，ctrl+D，e，移到Edge.cuts层</p><p>差分线的布线，布线，差分对交互布线（需要确保差分对网络以N/P或+/-结尾）<br>修改差分对设置，在电路板设置，预定义网络，按下6布线</p><p>AUM的具体接法参见数据手册，去ADI官网<a href="https://www.analog.com/cn/index.html">ADI公司 | 混合信号和数字信号处理IC | 亚德诺半导体 (analog.com)</a>，产品</p><p>在丝印层上划一道线，自己切割<br>芯片下方开槽，防止爬电（爬电距离：两相邻导体或一个导体与相邻电机壳表面的沿绝绝缘表面测量的最短距离）<br><img src="pic/Pasted image 20230209140634.png" alt=""><br>2.导出PCB<br>生成gerber文件<br><img src="pic/S_$JF08UL@J7N5@5E}54HG5.png" alt=""><br>焊盘层只是SMT的焊盘，或者叫钢网，开钢网所需要的文件<br>阻焊层不仅要阻焊到SMT，通孔的焊盘也要阻焊到</p><p>生成BOM文件，格式选择csv，可以直接看</p><h1 id="6-显示模式的设置"><a href="#6-显示模式的设置" class="headerlink" title="6. 显示模式的设置"></a>6. 显示模式的设置</h1><p>1.左侧<br>网格显示<br>（1）左侧最上面，是否显示网格点<br>（2）偏好设置，显示选项，网格样式<br>极坐标和笛卡尔坐标的切换，基本兼容了<br>大十字光标<br>飞线显示开关<br>用曲线显示飞线<br>在正常和暗显之间切换非活动图层，在做好布局之后，可以快速预览布局<br>切换高亮网络，一般用ctrl+鼠标左键就可以了<br>敷铜，选择网络，比如F.Cu，画出敷铜范围，按下B进行填充。在右侧的层，对象中可以设置敷铜的透明度<br>在轮廓下显示焊盘，这样只显示轮廓的边缘，好处，（1）减轻显卡的压力；（2）拖拉元件时方便检查锐角的情况<br>轮廓显示过孔<br>显示外观管理器，即右侧的菜单<br>2.右侧<br>对象，调整布线，敷铜的透明度，是否显示飞线等等。若要修改网格的颜色，偏好设置，颜色，主题，退出只读模式</p><h1 id="7-单端交互式布线详解"><a href="#7-单端交互式布线详解" class="headerlink" title="7. 单端交互式布线详解"></a>7. 单端交互式布线详解</h1><p>1.Kicad6.0自动布线已经无了<br>布线，交互式布线设置<br>高亮碰撞，违反了电器规则后会显示绿色，右侧也可以更改模式<br>在多条布线集中的区域调整走线的路径，修改的时候使用推挤模式更合适<br>自由角度模式，从结点出发的任何角度都可以布线，用于实在没办法的时候<br>优化焊盘的连接，自动找焊盘连接<br>移除多余的布线，选择一个最优布线，删除多余的布线，但是在环状的布线下不要使用<br>允许违反DRC，在不想改规则的时候，慎用<br><img src="pic/Pasted image 20230209165618.png" alt=""><br>最小间距设置，在电路板或者文件，设计规则，约束，铜层，最小布线宽度<br>最小环形宽度，过孔，通孔焊盘中间打孔到边缘的距离<br><img src="pic/Pasted image 20230209170152.png" alt=""><br>删除布线，选中后按delete，删除整个网络的线，按下shift+delete<br>调整布线的走向，按下/键<br>选择绕走模式，自动优化出一条布线<br>圆弧形布线，按下ctrl+/<br>2.设置线宽<br>（1）布线的时候按下e，输入布线的宽度（按下D，拖动，布线不会断开）<br>（2）使用网络宽度和预定义，按下W可以在布线的时候快速的切换，按shift+w反顺序调整<br>布线时按下V切换顶层和底层<br>电路板设置，网络类表<br>可以在网络名称筛选出模糊搜索，应用筛选，选择新网络VDD，分配到所有列出的网络<br><img src="pic/Pasted image 20230209172149.png" alt=""><br>双击布线可以显示宽度等信息</p><h1 id="8-PCB敷铜-amp-开天窗"><a href="#8-PCB敷铜-amp-开天窗" class="headerlink" title="8.PCB敷铜&amp;开天窗"></a>8.PCB敷铜&amp;开天窗</h1><p>1.双绞线卷起来，对差模信号可以起到抗干扰的作用，让干扰同步<br>ctrl+b，取消填充敷铜，只剩边界<br>敷铜区属性，间隙，两条相邻的走线的距离；最小宽度，大于此才会敷铜<br>焊盘连接<br>（1）防热（花焊盘），如果全敷的话，因为铜的导热性比较好，会将热量散发出去，不与焊接<br>（2）金属化过孔焊盘，放散热，在SMT时<br>（3）<br><img src="pic/V(`@]Y4OM`W[Y{2~`XXW@4V.png" alt=""><br>（4）网状图案敷铜，在AC-DC电源板或单面板，包封焊？的时候比较有用，在过锡炉的时候比较有用。因为铜的膨胀系数和环氧板的膨胀系数不一样，同的热胀率远高于纸板或FR-4，会造成铜面鼓包，也考虑到电磁影响，<br>网格宽度指线宽，网格间隙，一般是方格，大小是设置值平方<br>方向指角度<br>平滑效果，详细见软件<br>为什么不能出现钝角，直角？因为加工精度的问题<br>删除孤铜，一般选从不，如果想要，可以放一个过孔<br>轮廓线显示，可以修改。。<br>转角处理，倒角5mm，以敷铜的边界线5mm的边界，而不是电路板的<br>右击敷铜的边界，创建拐角，然后就可以去拉了<br>锁定，点击覆盖锁定还是可以拖动的<br>敷铜的优先级，敷铜会绕开优先级比较高的，一般来说地线优先级最低</p><p>2.开天窗作用，露出铜，可以镀上喷漆你，增加导流性，不喷漆可以提高散热<br>开天窗开在阻焊层，选择F.Mark和B.Mark，绘制形状，绘制的区域不喷阻焊；矩形区域划画出后按下E填充</p><h1 id="9-绘制金手指"><a href="#9-绘制金手指" class="headerlink" title="9. 绘制金手指"></a>9. 绘制金手指</h1><p>1.SMT需要注意基准点，绘制金手指的时候按照图纸的来就行<br>打开封装编辑器<br>NGFF-75PIN-0.5MM-B-KEY-EDGE 相邻两个焊盘的中心是0.5MM；B-KEY是它的子系列，edge是板边<br>通孔，直插入<br>在板框层绘制，画一条直线，设置起点和终点，ctrl+D，设置起点和终点<br>同一层绘制的直线有吸附作用<br>移动时只捕捉弧心，点击弧上的捕捉点，按下M<br>线段的输入坐标可以输入运算式<br>按下M移动的时候，改用shift+M，可以输入移动的距离</p><p>放置焊盘的时候选择板边连接器<br>多个焊盘，选中，按下F切换到底层，右击，复制默认属性，粘贴</p><p>在silk层可以做标记<br>因为这个不需要，所以在BOM和SMT坐标文件里面排除</p><h1 id="10-原理图的连接"><a href="#10-原理图的连接" class="headerlink" title="10. 原理图的连接"></a>10. 原理图的连接</h1><p>1.不用的端口按Q放置<br>添加节点J，交叉的线通过这个可以进行连接，用网络高亮进行检查<br>insert可以自动插入等长等参数的线<br>语法帮助<br><img src="pic/Pasted image 20230211204821.png" alt=""><br>前缀 D[0..7]<br>{网络1 网络2}<br>按下Z添加总线入口到总线，按B添加总线<br><img src="pic/Pasted image 20230211205412.png" alt=""><br>输入总线名称BUS[0..15]<br><img src="pic/Pasted image 20230211210020.png" alt=""><br>实际上总线的名称要和标签相互对应，之后将总线直接相连<br>PA类似于数组，不可变的是PA，可变的是0..15，相连后只和对应的数字进行匹配<br>好处是方便阅读原理图，使界面相对简洁<br><img src="pic/Pasted image 20230211210206.png" alt=""><br>网络类，<br>内部展开<br>SPI{MOSI MISO CLK CS[0..3]}<br>SPI.MOSI SPI.MISO SPI.CLK SPI.CS0 SPI.CS1 SPI.CS2 SPI.CS3<br><img src="pic/Pasted image 20230211211110.png" alt=""></p><h1 id="11-多原理图的连接"><a href="#11-多原理图的连接" class="headerlink" title="11.多原理图的连接"></a>11.多原理图的连接</h1><p>1.ctrl+L添加全局标签<br>网络标签，在当前的原理同中，多张原理图用全局标签，但是会比较乱<br>分层标签，<br>添加分层图框，可以分模块化<br><img src="pic/Pasted image 20230212101550.png" alt=""><br>这样就有了分页原理图的一个入口，双击进入，右击可以离开分页<br>所有的gnd，3.3V都是全局标签<br>普通标签不能跨原理图<br><img src="pic/Pasted image 20230212102403.png" alt=""><br>ctrl+f可以查找标签<br>添加一个分层标签H，本层原理图和其它原理图的连接端口，在分层原理图中添加分层标签，离开后点击导入分层图框引脚<br><img src="pic/Pasted image 20230212102800.png" alt=""><br>上排图标，显示原理图的连接结构</p><h1 id="12-PCB参数计算"><a href="#12-PCB参数计算" class="headerlink" title="12.PCB参数计算"></a>12.PCB参数计算</h1><p>1.过孔外径，在PCB计算器中通过过孔计算出电流的大小<br>间隙孔直径，相当于铜的直径<br>温升，允许温升为10℃的时侯计算得出的数值<br>脉冲上升时间，也就是过孔过多高的频率<br>工业上一般不会多过孔，至少是双过孔，防止温升，腐蚀<br><img src="pic/Pasted image 20230212150335.png" alt=""><br>2.布线宽度<br>双层板设置外层布线，多层板设置内层布线，线路厚度外层通常比内层要厚<br><img src="pic/Pasted image 20230212150801.png" alt=""><br>3.电气间距<br>大一个等级会好一点？<br><img src="pic/Pasted image 20230212151000.png" alt=""><br>4.电路板类别<br><img src="pic/Pasted image 20230212152425.png" alt=""><br>电源类的，大电流类的以布线宽度为标准<br>数据线，以传输为标准</p><p>过孔外径，如果是电源类的，大电流的，不考虑脉冲上升时间了，考虑成品通孔直径，镀层厚度，过孔长度（板子的厚度），间隙孔直径。注意，此处没有给出过孔开天窗的电流和过孔塞锡的电流，因为这个和加工的工艺有很大的关系，建议和加工厂进行联系</p><h1 id="13-原理图图纸编辑，关键字，变量的应用"><a href="#13-原理图图纸编辑，关键字，变量的应用" class="headerlink" title="13.原理图图纸编辑，关键字，变量的应用"></a>13.原理图图纸编辑，关键字，变量的应用</h1><p>1.修改原理图图框，双击title，进入图框设置<br>LOGO右侧倒数第二个，可以添加图片</p><p>2.图纸编辑器<br>检查，显示设计检查器，相当于把一个概览，显示有哪些元素<br>预览模式，可以选择是否显示<br>原点坐标可以选择，一般是左上角</p><p>预定义关键字，${keyword}<br>KICAD_VERSION</p><p>双击title后可以选择我们预先定义好的原理图<br>位图DPI，比例缩放</p><h1 id="14-Gerber文件逆向PCB"><a href="#14-Gerber文件逆向PCB" class="headerlink" title="14. Gerber文件逆向PCB"></a>14. Gerber文件逆向PCB</h1><p>1.打开Gerber文件查看器，导入.gbr和.drl文件，gbrjob是kicad生成的，别的地方不一定能用<br>文件，导出到PCB编辑器</p><h1 id="15-Kicad电路仿真"><a href="#15-Kicad电路仿真" class="headerlink" title="15.Kicad电路仿真"></a>15.Kicad电路仿真</h1><p>1.点开原理图，检查，仿真<br>元件只能从Pspice中选择<br>spice只提供命令行<br>用全局标签VCC连接，防止报错<br>修改电压源的大小，需要打开spice模型<br>勾选Spice_Model可以显示电压的大小<br>电气规则检查的时候，GND不可以是输入，但是此处却是输入，所以会报错，此问题可以忽略<br><img src="pic/Pasted image 20230212174821.png" alt=""><br>设置步长，起始时间和结束时间<br><img src="pic/Pasted image 20230212175355.png" alt=""><br>运行之后，用探针显示相关的数据</p><h1 id="16-kicad仿真正弦波，方波，脉冲"><a href="#16-kicad仿真正弦波，方波，脉冲" class="headerlink" title="16. kicad仿真正弦波，方波，脉冲"></a>16. kicad仿真正弦波，方波，脉冲</h1><p>1.spice模型编辑器，<br>无源，电容电感电阻<br>如果需要MOS管，三极管之类的，点击模型<br>如果需要220V的交流市电，点击源，瞬态分析，正弦，直流偏移0，幅度220，频率50<br>确定，仿真，添加探针<br>在修改spice模型的时候，如果添加了延时，可以仿真有源晶振，有源晶振有上电时间和稳定时间<br><img src="pic/Pasted image 20230213194557.png" alt=""><br>阻尼因数，如果设计过MOS管相关的，AC-DC,DC-DC，是形成阻尼振荡的形态</p><p>2.spice模型编辑的脉冲<br>初始值，0时间的值<br>脉冲宽度，1ms<br>周期需要大于脉冲宽度</p><h1 id="17-Kicad添加仿真库，仿真三极管特性曲线"><a href="#17-Kicad添加仿真库，仿真三极管特性曲线" class="headerlink" title="17.Kicad添加仿真库，仿真三极管特性曲线"></a>17.Kicad添加仿真库，仿真三极管特性曲线</h1><p>1.放置三极管，去官网找</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git基础指令</title>
    <link href="/Cathelloya/2023/09/23/Git%20%E6%8C%87%E4%BB%A4/"/>
    <url>/Cathelloya/2023/09/23/Git%20%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>以下内容来自<a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p><h1 id="0-常用小指令"><a href="#0-常用小指令" class="headerlink" title="0.常用小指令"></a>0.常用小指令</h1><p>粘贴代码到git，shift+insert</p><h1 id="1-Git主要命令"><a href="#1-Git主要命令" class="headerlink" title="1.Git主要命令"></a>1.Git主要命令</h1><h2 id="提交分支"><a href="#提交分支" class="headerlink" title="提交分支"></a>提交分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git commit<br></code></pre></td></tr></table></figure><h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch bugFix<br></code></pre></td></tr></table></figure><h2 id="切换到该分支"><a href="#切换到该分支" class="headerlink" title="切换到该分支"></a>切换到该分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout bugFix<br></code></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>1.如果你基于主分支master新建了分支dev，再基于dev分支新建了一个分支test，在test分支开发完成后，需要将test合并到dev分支上。此时，先用git branch 查看自己在哪个分支上，然后git checkout dev(切换到需要合并的分支上)，最后git merge test（在dev分支上执行这句，意思是将test合并到dev分支上）</p><p>首先checkout到main上，然后再<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git merge bugFix<br></code></pre></td></tr></table></figure></p><p>2.在bugFix分支上使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git rebase main<br></code></pre></td></tr></table></figure><br>项目更加线性</p><h1 id="2-分离HEAD"><a href="#2-分离HEAD" class="headerlink" title="2.分离HEAD"></a>2.分离HEAD</h1><p>在 <em>main</em> 的基础上继续<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout C4<br></code></pre></td></tr></table></figure></p><h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code><br><strong>以下代码将HEAD移动到指定的位置</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout bugFix^<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout bugFix~1<br></code></pre></td></tr></table></figure><p><strong>以下代码将指定的brach移动到指定的位置</strong><br>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><p><code>git branch -f main HEAD~3</code></p><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级 parent 提交。</p><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。<br>要完成此关，分别撤销 <code>local</code> 分支和 <code>pushed</code> 分支上的最近一次提交。共需要撤销两个提交（每个分支一个）。<br>记住 <code>pushed</code> 是远程分支，<code>local</code> 是本地分支 —— 这么说你应该知道用分别哪种方法了吧？</p><p><strong>对于本地的撤销</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset HEAD~1<br></code></pre></td></tr></table></figure><br><strong>对于远程的撤销</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">get revert HEAD~1<br></code></pre></td></tr></table></figure></p><h1 id="3-自由修改提交树"><a href="#3-自由修改提交树" class="headerlink" title="3.自由修改提交树"></a>3.自由修改提交树</h1><h2 id="整理提交记录"><a href="#整理提交记录" class="headerlink" title="整理提交记录"></a>整理提交记录</h2><p>从HEAD指向的地方增加C2’ C3’ C4’<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git cherry-pick C2 C3 C4<br></code></pre></td></tr></table></figure></p><h2 id="交互式的rebase"><a href="#交互式的rebase" class="headerlink" title="交互式的rebase"></a>交互式的rebase</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git rebase -i HEAD~4<br></code></pre></td></tr></table></figure><h2 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h2><p>….</p><h2 id="提交的技巧"><a href="#提交的技巧" class="headerlink" title="提交的技巧"></a>提交的技巧</h2><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>git commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><p>当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个<code>&#39;</code> —— 我们把这个提交移动了两次，每移动一次会产生一个 <code>&#39;</code>；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。</p><p>也就是说，我在对比结果的时候只会对比提交树的结构，对于 <code>&#39;</code> 的数量上的不同，并不纳入对比范围内。只要你的 <code>main</code> 分支结构与目标结构相同，我就算你通过。</p><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>给c1打上v1的标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag v1 c1<br></code></pre></td></tr></table></figure></p><h2 id="git-describe"><a href="#git-describe" class="headerlink" title="git describe"></a>git describe</h2><p><code>git describe</code> 的​​语法是：</p><p><code>git describe &lt;ref&gt;</code></p><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会使用你目前所在的位置（<code>HEAD</code>）。</p><p>它输出的结果是这样的：</p><p><code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</code></p><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h1 id="4-多次rebase的用法"><a href="#4-多次rebase的用法" class="headerlink" title="4.多次rebase的用法"></a>4.多次rebase的用法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git rebase master bugFix<br>git rebase bugFix side<br>git rebase side another<br>git branch -f master another<br></code></pre></td></tr></table></figure><h2 id="返回上个时遇到两个父节点"><a href="#返回上个时遇到两个父节点" class="headerlink" title="返回上个时遇到两个父节点"></a>返回上个时遇到两个父节点</h2><p>HEAD~首先回到上一层<br>^2 会优先选择较新的节点<br>^   会优先选择较早的节点<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch bugWork HEAD~^2~<br></code></pre></td></tr></table></figure></p><h1 id="5-远程仓库"><a href="#5-远程仓库" class="headerlink" title="5.远程仓库"></a>5.远程仓库</h1><h2 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone<br></code></pre></td></tr></table></figure><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git commit<br>git checkout o/main<br>git commit<br></code></pre></td></tr></table></figure><h2 id="一键下载"><a href="#一键下载" class="headerlink" title="一键下载"></a>一键下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git fetch<br></code></pre></td></tr></table></figure><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>以下两种方式是等价的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git pull<br></code></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git fetch<br>git merge o/main<br></code></pre></td></tr></table></figure><h2 id="模拟团队合作"><a href="#模拟团队合作" class="headerlink" title="模拟团队合作"></a>模拟团队合作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone<br>git fakeTeamwork 2<br>git commit<br>git pull<br></code></pre></td></tr></table></figure><h2 id="git-push一键上传"><a href="#git-push一键上传" class="headerlink" title="git push一键上传"></a>git push一键上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push<br></code></pre></td></tr></table></figure><h2 id="偏离的提交历史"><a href="#偏离的提交历史" class="headerlink" title="偏离的提交历史"></a>偏离的提交历史</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone<br>git fakeTeamwork 1<br>git commit<br>git pull --rebase<br>git push<br></code></pre></td></tr></table></figure><h2 id="远程服务器拒绝-Remote-Rejected"><a href="#远程服务器拒绝-Remote-Rejected" class="headerlink" title="远程服务器拒绝!(Remote Rejected)"></a>远程服务器拒绝!(Remote Rejected)</h2><p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地main, 然后试图推送(push)修改, 你将会收到这样类似的信息:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">! <span class="hljs-selector-attr">[远程服务器拒绝]</span> <span class="hljs-selector-tag">main</span> -&gt; <span class="hljs-selector-tag">main</span> (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ad-note">git reset o/main<br>git checkout -b feature c2<br>git push origin feature<br></code></pre></td></tr></table></figure><h1 id="6-关于origin和它的周边"><a href="#6-关于origin和它的周边" class="headerlink" title="6.关于origin和它的周边"></a>6.关于origin和它的周边</h1><h2 id="推送主分支-rebase"><a href="#推送主分支-rebase" class="headerlink" title="推送主分支 rebase"></a>推送主分支 <code>rebase</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git fetch<br>git rebase o/master side1<br>git rebase side1 side2<br>git rebase side2 side3<br>git rebase side3 master<br>git push<br></code></pre></td></tr></table></figure><h2 id="推送主分支-merge"><a href="#推送主分支-merge" class="headerlink" title="推送主分支 merge"></a>推送主分支 <code>merge</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout master<br>git pull origin master<br>git merge side1<br>git merge side2<br>git merge side3<br>git push origin master<br></code></pre></td></tr></table></figure><h2 id="远程跟踪-创建一个名为foo的分支跟踪o-main"><a href="#远程跟踪-创建一个名为foo的分支跟踪o-main" class="headerlink" title="远程跟踪,创建一个名为foo的分支跟踪o/main"></a>远程跟踪,创建一个名为foo的分支跟踪o/main</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> foo o/<span class="hljs-selector-tag">main</span><br>git pull<br></code></pre></td></tr></table></figure><p>另一种设置远程追踪分支的方法就是使用：<code>git branch -u</code> 命令，执行：<br><code>git branch -u o/main foo</code><br>这样 <code>foo</code> 就会跟踪 <code>o/main</code> 了。如果当前就在 foo 分支上, 还可以省略 foo：<br><code>git branch -u o/main</code></p><p>这边的git pull —rebase会产生c3’,git pull会产生c4<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b side o/master / git branch -f side master<br>git commit<br>git pull --rebase<br>git push<br></code></pre></td></tr></table></figure></p><h2 id="git更新指定仓库"><a href="#git更新指定仓库" class="headerlink" title="git更新指定仓库"></a>git更新指定仓库</h2><p>用本地的分支main更新远程仓库origin中的分支main<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin main<br></code></pre></td></tr></table></figure></p><p>要同时为源和目的地指定 <code>&lt;place&gt;</code> 的话，只需要用冒号 <code>:</code> 将二者连起来就可以了：<br><code>git push origin &lt;source&gt;:&lt;destination&gt;</code><br>这个参数实际的值是个 refspec，“refspec” 是一个自造的词，意思是 Git 能识别的位置（比如分支 <code>foo</code> 或者 <code>HEAD~1</code>）<br>一旦你指定了独立的来源和目的地，就可以组织出言简意赅的远程操作命令了，让我们看看演示！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin master<br>git push origin foo<br></code></pre></td></tr></table></figure><h2 id="git-pull参数"><a href="#git-pull参数" class="headerlink" title="git pull参数"></a>git pull参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git pull origin bar:foo<br>git pull origin master:side<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Cathelloya/2023/09/23/hello-world/"/>
    <url>/Cathelloya/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
